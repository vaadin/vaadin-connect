
---
title: Security
order: 799
layout: page
---

= Vaadin Connect Maven plugin

The Vaadin Connect project provides a helper plugin for generating the frontend resources based on a backend
declaration of every `@VaadinService` annotated java class.

== Generation steps

Full generation consists of three consequent steps:

* Open Api v3 specification generation

Is done based on the the project sources and Vaadin Connect properties file, if present.
Refer to
https://github.com/vaadin/vaadin-connect/blob/master/vaadin-connect/src/main/java/com/vaadin/connect/VaadinConnectProperties.java[`VaadinConnectProperties`]
java class for more details on the Vaadin Properties.

If the properties file is not present, defaults from the java file mentioned above are used.

As the generation result, an open api json file is created, the file can be used to visualize the application api via
https://swagger.io/tools/swagger-ui/[swagger-ui] and the following, modules' generation step is based on this file.

* Default Vaadin Client generation

A default client is generated, using the Vaadin Connect properties for initializing the client for the user instead
of writing the boilerplate for each project.

Same as in the previous step, if no properties file is present, defaults are used.

As the generation result, a JavaScript module containing the vaadin-client declaration us crated.
This module can be used in the frontend part of the project to omit the manual client configuration.

* Vaadin Service js modules' generation

Requires an open api json generated on the first step.

As the generation result, JavaScript modules are created for each `@VaadinService` java class, providing an easy
access to the backend api on the client side.

[NOTE]
====
The generation creates all the necessary files and directories, if they are absent.

It also rewrites the generated files each time it is performed.
====


== Usage in Maven

If you're starting the project from scratch and not sure which steps to use, use all of them:


[source,xml]
----
<plugin>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-connect-maven-plugin</artifactId>
    <version>${vaadin.connect.version}</version>
    <executions>
        <execution>
            <!--Steps for generating Vaadin Connect helpers for the application-->
            <id>vaadin-connect-resources</id>
            <goals>
                <goal>generate-openapi-spec</goal>
                <goal>generate-vaadin-client</goal>
                <goal>generate-connect-modules</goal>
            </goals>
        </execution>
    </executions>
</plugin>
----

You can remove any goal any time necessary, if not needed anymore.

Plugin can be customized by adding the `<configuration>` section to into the plugin declaration in the pom.xml

The following parameters with their default values are:

* The target file for the open api spec to be generated to
[source,xml]
----
<openApiJsonFile>${project.build.directory}/generated-resources/openapi.json</openApiJsonFile>
----

* The target directory for the client and modules javascript files generated by the plugin
[source,xml]
----
<generatedFrontendDirectory>${project.basedir}/frontend/src/generated/</generatedFrontendDirectory>
----

* The properties file to read the Vaadin Connect properties from, defaults will be used when no file provided
[source,xml]
----
<applicationProperties>${project.basedir}/src/main/resources/application.properties</applicationProperties>
----


Refer to https://github.com/vaadin/base-starter-connect[Vaadin Connect starter project] for the working project with
the plugin configured.
