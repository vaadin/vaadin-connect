
---
title: Vaadin Connect Maven plugin
order: 799
layout: page
---

= Vaadin Connect Maven plugin

The Vaadin Connect project provides a helper plugin for generating the frontend resources based on a backend
declaration of every `@VaadinService` annotated Java class.

== Generation steps

Full generation consists of three consequent steps:

=== Open Api v3 specification generation

Refer to
https://github.com/OAI/OpenAPI-Specification[OpenAPI specification]
for more details on the specification considered in this section.

The generation is done based on the the project sources and Vaadin Connect properties file, if present.
Refer to
https://github.com/vaadin/vaadin-connect/blob/master/vaadin-connect/src/main/java/com/vaadin/connect/VaadinConnectProperties.java[`VaadinConnectProperties`]
Java class for more details on the Vaadin Properties.

If the properties file is not present, defaults from the Java file mentioned above are used.

As the generation result, an OpenAPI json file is created, the file can be used to visualize the application api via
https://swagger.io/tools/swagger-ui/[swagger-ui] and the following, modules' generation step is based on this file.

=== Default Vaadin Client generation

In this step, the generator always cleans <<generatedFrontendDirector, the generated directory>> to make sure that all the generated files are synced with the backend.

==== Using default client provided by vaadin-connect

A default client is generated, using the Vaadin Connect properties for initializing the client for the user instead of writing the boilerplate for each project.

Same as in the previous step, if no properties file is present, defaults are used.

As the generation result, a JavaScript module created, containing the default vaadin-client declaration.
This module can be used in the frontend part of the project to omit the manual client configuration.

==== Using your own client

If you want to use your own client instead of the default one, you can implement your client in the following ways:

. Implement the client in `${project.basedir}/frontend/connect-client.js`.
. Provide your custom client path in `${project.basedir}/src/main/resources/application.properties` with the key `vaadin.connect.connect-client.path`. The path must be relative to your `${project.basedir}`. For example:

```
# Other properties
vaadin.connect.connect-client.path=frontend/my-custom-path/my-connect-client.js
```

If the path is provided, the file `${project.basedir}/frontend/connect-client.js` is not used regardless of its existence.

In this case, the plugin will not generate the default client and will use your defined client in <<vaadin-service-js-modules-generation, the generated modules>> in the next step.

=== Vaadin Service JavaScript modules' generation [[vaadin-service-js-modules-generation]]

Requires an OpenAPI json generated on the first step.

As the generation result, JavaScript modules are created for each `@VaadinService` Java class, providing an easy
access to the backend api on the client side.

[NOTE]
====
The generation creates all the necessary files and directories, if they are absent.

It also rewrites the generated files each time it is performed.
====

If you feel interested in the modules' generation details, the process in depth is described in the
<<./javascript-generator#,JavaScript generator page>>.

== Usage in Maven

If you're starting the project from scratch and not sure which steps to use, use all of them:


[source,xml]
----
<plugin>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-connect-maven-plugin</artifactId>
    <version>${vaadin.connect.version}</version>
    <executions>
        <execution>
            <!--Steps for generating Vaadin Connect helpers for the application-->
            <id>vaadin-connect-resources</id>
            <goals>
                <!--Generates Open Api v3 spec, happens on process-sources phase by default-->
                <goal>generate-openapi-spec</goal>
                <!--Generates the default Vaadin Connect client for sending requests to Vaadin Connect services, happens on generate-resources phase by default-->
                <goal>generate-vaadin-client</goal>
                <!--Generates Vaadin Connect services' modules to ease their method access, happens on generate-resources phase by default-->
                <goal>generate-connect-modules</goal>
            </goals>
        </execution>
    </executions>
</plugin>
----

You can remove any goal any time necessary, if not needed anymore.

Plugin can be customized by adding the `<configuration>` section to into the plugin declaration in the pom.xml

The following parameters with their default values are:

* The target file for the OpenAPI spec to be generated to
[source,xml]
----
<openApiJsonFile>${project.build.directory}/generated-resources/openapi.json</openApiJsonFile>
----

* The target directory for the client and modules JavaScript files generated by the plugin [[generatedFrontendDirectory]]
[source,xml]
----
<generatedFrontendDirectory>${project.basedir}/frontend/generated/</generatedFrontendDirectory>
----

* The properties file to read the Vaadin Connect properties from, defaults will be used when no file provided
[source,xml]
----
<applicationProperties>${project.basedir}/src/main/resources/application.properties</applicationProperties>
----


Refer to https://github.com/vaadin/base-starter-connect[Vaadin Connect starter project] for the working project with
the plugin configured.

== Automatic resources generation

Due to the fact that all the plugin generation goals are tied to the Maven lifecycle phases that happen before `compile` phase,
it's possible to regenerate the files by using the plugin that recompiles the project on Java code change.
For example, https://github.com/fizzed/maven-plugins#watcher-fizzed-watcher-maven-plugin[fizzed-watcher-maven-plugin] can be used the following way:

First, add the both plugins (Vaadin Connect and watcher ones) to the project's pom.xml.
The watcher plugin can be declared the following way:

[source,xml]
----
<plugin>
    <groupId>com.fizzed</groupId>
    <artifactId>fizzed-watcher-maven-plugin</artifactId>
    <version>1.0.6</version>
    <configuration>
        <watches>
            <watch>
                <directory>src/main/java</directory>
            </watch>
        </watches>
        <goals>
            <goal>compile</goal>
        </goals>
    </configuration>
</plugin>
----

Then, start the watcher process via `mvn fizzed-watcher:run` command.

After that, on each Java sources' change (some IDEs require to explicitly save the changes before they update the actual files),
the Vaadin Connect resources will be regenerated.

See https://github.com/vaadin/base-starter-connect[Vaadin Connect starter project] for a working example.
