---
title: Getting Started
order: 790
layout: page
---

=== 1. Setup up a new Vaadin Connect project

Open a terminal and run the following commands.

Clone the `base-starter-connect` project:

[source,console]
----
$ git clone --depth 1 https://github.com/vaadin/base-starter-connect
$ cd base-starter-connect
----

Install dependencies:

[source,console]
----
$ npm install
----

Start the development server:

[source,console]
----
$ npm start
----

Browse http://localhost:8080 to make sure that the application works.

Open http://localhost:8082 to see the API browser.

Keep your terminal open and development server running for the next steps.

=== 2. Learn the project structure

The `base-starter-connect` combines a Java backend and a JS frontend under a
single project.

.Java parts:
* `pom.xml` Maven project description and dependencies list
** `src/main/java/` source directory
** `src/main/java/com/vaadin/connect/starter/StarterApplication.java` main Java
   file
* `src/main/resources/application.properties` application properties
* `src/test/java/` tests
* `target` build directory
** `target/generated/resources/openapi.json` generated OpenAPI specification

.Frontend JS parts:
* `package.json` npm project description and dependencies list
* `node_modules/` npm dependencies installation directory
* `frontend/` source directory
** `frontend/index.html` main HTML file
** `frontend/index.js` main JS file
** `frontend/generated/` generated JavaScript directory
** `frontend/test/` unit tests
* `static/` static frontend resources (favicon, images, fonts, etc)

.Non-frontend JS parts:
* `scripts/` Node scripts starting development servers, needed for the `npm
  start` and `npm test` commands
* `e2e/` End-to-end test scenarios written in JS for the backend and the
  frontend together

[NOTE]
.Where is the web root directory?
====
Any file from the `static/` directory (e. g., `static/favicon.ico`) is served
from the web root (`/favicon.ico`).

In addition, the selected `frontend/` directory contents (namely,
`frontend/index.html`, `frontend/index.js`, `frontend/polyfills.js` files and
all their dependencies) are compiled and served from the root, and the frontend
dependencies from `node_modules/` are included in the compiled bundle.

Unlike in many frontend frameworks, the repository root is not served, i. e. the
`GET /package.json` request will result in the `404 Not Found` error response.

Unlike in many Java web frameworks, the Java resources directory
`src/main/webapp` is not used for the frontend files.
====

=== 3. Make your first backend service

Open the project in your IDE and make a new Java file under the
`src/main/java/com/vaadin/connect/starter/` directory:

[source,java]
.CounterService.java
----
package com.vaadin.connect.starter;

import com.vaadin.connect.VaadinService;

/**
 * A Vaadin Connect service that counts numbers.
 */
@VaadinService
public class CounterService {
    /**
     * A method that adds one to the argument.
     */
    public int addOne(int number) {
        return number + 1;
    }
}
----

Save the file and wait a few seconds for the development server to compile the
changes and reload.

Open link:http://localhost:8082[the development API browser] and see that the
`CounterService` and the `addOne` method are now listed there.

NOTE: There is also a JavaScript module generated automatically for your new
service, `frontend/generated/CounterService.js`.

=== 4. Use your new service in the frontend

Now let us built a simple UI to utilize the new backend service.

Open `frontend/index.html` and add the following lines to the beginning of the
`<body>` section:

[source,html]
.frontend/index.html additions
----
<body>
  <vaadin-text-field id="counter" label="Counter" value="1"></vaadin-text-field>
  <vaadin-button id="addOne">Add one</vaadin-button>
  <br>

  <!-- ... -->
</body>
----

Then, add the following to the beginning of `frontend/index.js`:

[source,js]
----
import * as counterService from './generated/CounterService.js';

const counter = document.getElementById('counter');
document.getElementById('addOne').onclick = async() => {
  counter.value = await counterService.addOne(counter.value);
};

/* ... */
----

[NOTE]
.The `async` and `await` JavaScript keywords
====
We use `async` and `await` keywords in JavaScript. This allows to write
asynchronous code in a flat manner, avoiding callbacks and explicit `Promise`
usage.

The generated JavaScript is made with that in mind: the backend service methods
are translated to `async` JavaScript methods.
====

Now open http://localhost:8080 the browser.

Now, there is a counter text field in the beginning of the page with the initial
value of 1. Click the “Add one” button.

There is a login form shown. Use the credentials shown in the bottom of the page
to authenticate.

After successful authentication, the counter should show 2. Your backend and
frontend now work together, congratulations!

If you press the button again, you are not prompted for the authentication
anymore, instead the counter increments right away.

[IMPORTANT]
.Security in Vaadin Connect
====
You may wonder, why are you prompted to authenticate? The reason is that every
Vaadin Connect method is secure by default. The user is required to be
authenticated in order to call.

You can optionally bypass this authentication requirement and make a method
available for anonymous users by using the `@AnonymousAllowed` annotation.

The `base-starter-connect` project already sets up a login form using the
`<vaadin-login-overlay>` component in order to implement the authentication with
the Vaadin Connect server. You can see login form wiring code yourself in the
`frontend/index.js` file.

See the link:security.asciidoc[Vaadin Connect Security] guide to learn more on
how the authentication works.
====
