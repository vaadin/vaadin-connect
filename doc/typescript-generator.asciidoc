---
title: Vaadin Connect TypeScript Services Generator
order: 801
layout: page
---

= TypeScript Services Generator in Vaadin Connect

The TypeScript generator produces TypeScript files based on the information from an OpenApi document which is generated from Java files in `_src/main/java_` folder by default.

[NOTE]
====
Vaadin Connect uses https://github.com/OAI/OpenAPI-Specification[OpenAPI Specification] as a middle layer between Java services and TypeScript service wrappers. The current implementation is based on OpenAPI specification 3.0.
====

A simple generated TypeScript files will look like the following snippet:

.UserService.ts
[[UserService.ts]]
[source,typescript]
----
/**
 * User service.
 *
 * This module has been generated from UserService.java
 */
import client from './connect-client.default.ts';

/**
 * Check if a user is admin or not.
 *
 * @param id User id to be checked
 * @returns Return true if the given user is an admin, otherwise false.
 */
export function isAdmin(id: number): Promise<boolean> {
  return client.call('UserService', 'isAdmin', {id});
}

----

=== Modules
The generator will collect all the `_tags_` field of all operations in the OpenAPI document. Each tag will generate a corresponding TypeScript file. The tag name is used for TypeScript module name as well as the file name. JsDoc of the class will be fetched from `_description_` field of the https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#tagObject[tag object] which has the same name as the class.

=== Static code
The `_import_` is a static part of any generated file.
`_connect-client.default.ts_` is another generated file which includes default configurations for the `_ConnectClient_` and exports its instance as `_client_`.

=== Methods
Each exported method in a module is corresponding to a https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operationObject[POST operation] of a https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#pathItemObject[path item] in https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#pathsObject[paths object].

[NOTE]
====
Currently, the generator only supports `_POST_` operation. If a path item contains other operations than `_POST_`, the generator will stop processing.
====

The path *must* start with `/` as described in https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#patterned-fields[Patterned Fields]. It is parsed as `_/<service name>/<method name>_` which are used as parameters to call to Java services in the backend. Method name from the path is also reused as the method name in the generated TypeScript file.

==== Method's Parameters
Parameters of the method are taken from the `_application/json_` content of https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#requestBodyObject[request body object]. To get the result as <<UserService.ts>>, the request body content should be:

.Request Body
[source, json]
[[request-body]]
----
{
 "content": {
    "application/json": {
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "User id to be checked"
          }
        }
      }
    }
  }
}
----

Type and description of each property are used for JsDoc that describes the parameter in more details.

[NOTE]
====
All the other content types of request body object are not ignored by Vaadin Connect Generator. It means that without the `application/json` content type, the method is considered as a no parameter one.
====

==== Method's Return Type

Return type and its description are taken from the `_200_` https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#responseObject[response object]. As same as request body object, the generator is only interested at `application/json` content type. The schema type indicates the return type and the description describes the result. Here is an example of a https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#responsesObject[responses objects]:

.Responses Object
[source, json]
[[response-object]]
----
{
  "200": {
    "description": "Return true if the given user is an admin, otherwise false.",
    "content": {
      "application/json": {
        "schema": {
          "type": "boolean"
        }
      }
    }
  }
}
----

[NOTE]
====
At this point, the generator only takes the advantage of `_200_` response objects. Other response objects are ignored.
====

==== Method's JsDoc

The JsDoc of the generated method is stored as `_description_` value of the `_POST_` operation in path item. A valid `_POST_` operation combined with <<request-body>> and <<response-object>> would look like:

.Post Operation
[source, json]
----
{
  "tags": ["UserService"], // <1>
  "description": "Check if a user is admin or not.",
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "User id to be checked"
            }
          }
        }
      }
    }
  },
  "responses": {
    "200": {
      "description": "Return true if the given user is an admin, otherwise false.",
      "content": {
        "application/json": {
          "schema": {
            "type": "boolean"
          }
        }
      }
    }
  }
}
----

<1> As mentioned in https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operationObject[operation object] specification, in Vaadin Connect Generator, `_tags_` are used to classify operations into TypeScript files. It means each tag will have a corresponding generated TypeScript file. The operations, which contain more than one tag, will appear in all generated files. Empty tags operations will be placed in `_Default.ts_` file.

[NOTE]
====
Although multiple tags do not break the generator, it might be confusing in the development time when there are two exact same methods in different TypeScript files. It is recommended to have only one tag per operation.
====

Here is an example OpenAPI document which could generate the above <<UserService.ts>>.

.User service OpenApi document
[source, json]
----
{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "My example application",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://myhost.com/myendpoint",
    "description" : "Vaadin connect backend server"
  } ],
  "tags" : [ {
    "name" : "UserService",
    "description" : "User service class."
  } ],
  "paths" : {
    "/UserService/isAdmin" : {
      "post": {
        "tags": ["UserService"],
        "description": "Check if a user is admin or not.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "User id to be checked"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return true if the given user is an admin, otherwise false.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    }
  }
}
----
