---
title: How to add a login form
order: 791
layout: page
---

= How to add a login form

Developer must to provide a way for asking the user and password pair. There are two options to login to the backend server:

- Let Vaadin Connect `client` to activate the login form when a server service is demanded.
- Or interactivelly ask for login when the App is opened by calling the `connect.login()` method.

== How to configure the form and credentials callback?

=== 1. Define a login form in your UI

Although you can use any HTML components for the form, in our example we use the https://github.com/vaadin/vaadin-login[vaadin-login-overlay] web component because of its simplicity. It is added to the UI as any other HTML tag:

[source,html]
----
<vaadin-login-overlay></vaadin-login-overlay>
----

Then, the import for the compoment library is needed to make it work, and eventually you can configure it by using its JavaScript API:

[source,javascript]
----

import '@vaadin/vaadin-login/vaadin-login-overlay.js';

const vaadinLoginOverlay = document.querySelector('vaadin-login-overlay');

vaadinLoginOverlay.i18n = {
  header: {
    title: 'My App Login',
  },
  form: {
    username: 'Username',
    password: 'Password',
    submit: 'Submit'
  }
};
----

[NOTE]
====
`vaadin-login-overlay` is hidden by default, hence it's developer responsability to show it whenever the authentication is needed (see the code in the next section as reference).
====

=== 2. Set the `credentials` callback

Vaadin Connect `client` inspects service callbacks, when it realises that there is no valid token, it executes the `credentials()` callback, thus developer must provide it as in the following example:


[source,javascript]
----

import client from './generated/connect-client.default.js';

client.credentials = (options) => {
  vaadinLoginOverlay.opened = true;
  vaadinLoginOverlay.disabled = false;
  return new Promise(resolve => {
    vaadinLoginOverlay.addEventListener('login', e => {
      vaadinLoginOverlay.opened = false;
      resolve({
        username: e.detail.username,
        password: e.detail.password,
        stayLoggedIn: true});
    }, {once: true});
  });
};
----


[NOTE]
====
`stayLoginIn` means that the `refresh_token` will be stored in the browser for a future usage when the user re-visits the application.
====

== How to call `login()` and `logout()` methods

Vaadin Connect API provides two methods for interactivelly login or logout to the application.


=== The `login()` method
You can check whether users are authenticated the first time they visit the application. After configuring your form and credentials just call the `login()` method, it will ask for the login credentials only in the case that the `refresh_token` is invalid.

[source,javascript]
----

import '@vaadin/vaadin-login/vaadin-login-overlay.js';
import client from './generated/connect-client.default.js';

const vaadinLoginOverlay = document.querySelector('vaadin-login-overlay');

client.credentials = (options) => {
  vaadinLoginOverlay.opened = true;
  vaadinLoginOverlay.disabled = false;
  return new Promise(resolve => {
    vaadinLoginOverlay.addEventListener('login', e => {
      vaadinLoginOverlay.opened = false;
      resolve({
        username: e.detail.username,
        password: e.detail.password,
        stayLoggedIn: true});
    }, {once: true});
  });
};

client.login();
----

=== The `logout()` method

You might be interested to remove authentication tokens from browser in order to the user be asked to login the next time. Add logout button to your UI for that:

[source,html]
----
<button id="logout">Logout</button>
----

[source,javascript]
----
import client from './generated/connect-client.default.js';

const logout = document.getElementById('logout');
logout.addEventListener('click', e => client.logout());
----

== Next Steps

- <<how-to-add-api-endpoint#,How to add an API endpoint to your Application>>
- https://github.com/vaadin/base-starter-connect/blob/master/frontend/login-controller.js[Visit the Login JavaScript code in the Starter Project]
- <<security#,Learn more about the Vaadin Connect seecurity mechanism>>
- <<README#,Browse through the docs>>
