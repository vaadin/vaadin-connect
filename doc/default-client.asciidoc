---
title: Vaadin Connect Default Client
order: 802
layout: page
---

= Vaadin Connect Default Client

== Vaadin Connect client

Vaadin Connect consists of two parts: a backend and a client ones.
The client part is represented by a `@vaadin/connect` library that is able to support the features the backend part provides.

One of the main public entities of the library is the `ConnectClient` object, that provides a seamless way to communicate with the
Vaadin Connect services on a backend side of the application selected.

== Default client

The default client is the module that gets generated by Vaadin Connect maven plugin for a particular project.
Refer to <<./vaadin-connect-maven-plugin#,Vaadin Connect Maven Plugin>> documentation for more details on the generation.

When generated, the module contains the `ConnectClient` implementation that is set up to communicate with the
backend side of the project.

Along with the default client, the plugin is capable of generating the modules for each Vaadin Connect service defined in the backend part.
Those modules use the default client to communicate with the backend also.

== `ConnectClient` features

Vaadin Connect client (hence the default client also) main goal is to ease the communications with the Vaadin Connect backend server
by adding the built in support for its oauth part and easing the Vaadin Connect backend services access.
See <<./security#,Security in Vaadin Connect>> for more about Vaadin Connect oauth server and related features.

Vaadin Connect client built-in oauth server support does the following:

* Automatically adds an access token to every request to the Vaadin Connect backend

By default, every Vaadin Connect backend service method requires a token to be provided so it could be invoked via a corresponding request from the client side.
The client ensures that the token, if present, is passed to the backend.

* Automatically retrieves and extracts the access and refresh tokens from the Vaadin Connect oauth server responses

When an access token is missing, the client attempts to retrieve it from the backend, handling an error responses
from the server and trying to resolve those automatically.

* Automatically checks for the access token expiration and renews it with the refresh token, if provided

If the Vaadin Connect oauth server returns a refresh token, it will be used to update the access token when it expires to continue
sending the requests to Vaadin Connect backend.

* Automatically renders a login form for retrieving the tokens

When an access token is impossible to retrieve via the refresh token, a login form will be rendered on a client so that the user can authorize
himself and continue using the client that will be doing the Vaadin Connect backend calls.
This behavior is customizable and can be overridden.

[NOTE]
====
Nothing restricts you from directly accessing the backend with requests without the client â€“ if needed, the functionality can be
implementing from scratch by the Vaadin Connect user.
====

== Usage example

Consider Vaadin Connect backend that is started on `/customEndpoint` endpoint and has a single service with name `SingleService`
and a method `customMethod` requiring a `number` parameter to be specified.

We would like to access this method from the client part.
Depending on how many generated files are present, one of the approaches below can be used.
As the only prerequisite for any of the approaches below, `@vaadin/connect` JavaScript library is required to be installed in the
client side project.

=== Generated module using the generated client

When all the Vaadin Connect plugin generation goals are used, the service method can be called via the generated module method:

.Using generated module
[source, javascript]
[[generated-module]]
----
import {* as singleService} from './src/generated/SingleService';
await singleService.customMethod(4);
----

=== Generated default client

If only the default client is generated, it can be used to access the Vaadin Connect service the following way:

.Using generated client
[source, javascript]
[[generated-client]]
----
import client from './src/generated/connect-client.default';
await client.call('SingleService', 'customMethod', {number: 4});
----

=== Client library

Client library usage requires an extra step where we specify the endpoint of the server to send the requests to:

.Using client library
[source, javascript]
[[client-library]]
----
import {ConnectClient} from '@vaadin/connect';
const client = new ConnectClient({endpoint: '/customEndpoint'});
await client.call('SingleService', 'customMethod', {number: 4});
----
